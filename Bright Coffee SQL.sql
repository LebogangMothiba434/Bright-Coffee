SELECT*
FROM SHOP.COFFEE_SALES.BRIGHT_COFFEE_SHOP_SALES;
--Minimum transcation time
SELECT MIN(TRANSACTION_TIME)
FROM SHOP.COFFEE_SALES.BRIGHT_COFFEE_SHOP_SALES;
--Maximum transcation time
SELECT MAX(TRANSACTION_TIME)
FROM SHOP.COFFEE_SALES.BRIGHT_COFFEE_SHOP_SALES;
--Data transformation
SELECT 
  TO_DATE(TRANSACTION_DATE, 'YYYY/MM/DD') AS transaction_date,
  TO_CHAR(TO_DATE(TRANSACTION_DATE, 'YYYY/MM/DD'), 'YYYYMM') AS MONTH_ID,
  COUNT(TRANSACTION_ID) AS NUMBER_OF_SALES,
  COUNT(PRODUCT_ID) AS UNIQUE_PRODUCTS_SOLD,
  SUM(TRANSACTION_QTY * TO_NUMBER(REPLACE(UNIT_PRICE, ',', '.'))) AS TOTAL_AMOUNT,
  PRODUCT_CATEGORY,
  PRODUCT_DETAIL,
  PRODUCT_TYPE,
  STORE_LOCATION,
  CASE 
    WHEN TRANSACTION_TIME BETWEEN '06:00:00' AND '11:59:59' THEN 'Morning'
    WHEN TRANSACTION_TIME BETWEEN '12:00:00' AND '16:59:59' THEN 'Afternoon'
    WHEN TRANSACTION_TIME BETWEEN '17:00:00' AND '19:59:59' THEN 'Evening'
    ELSE 'Night'
  END AS TIME_BUCKETS,
FROM SHOP.COFFEE_SALES.BRIGHT_COFFEE_SHOP_SALES
GROUP BY ALL
ORDER BY TRANSACTION_DATE ASC;
--
SELECT 
  TO_DATE(TRANSACTION_DATE, 'YYYY/MM/DD') AS transaction_date,
  TO_CHAR(TO_DATE(TRANSACTION_DATE, 'YYYY/MM/DD'), 'YYYYMM') AS MONTH_ID,
  COUNT(TRANSACTION_ID) AS NUMBER_OF_SALES,
  COUNT(PRODUCT_ID) AS UNIQUE_PRODUCTS_SOLD,
  SUM(TRANSACTION_QTY) AS TOTAL_QTY_SOLD,
  SUM(TRANSACTION_QTY * TO_NUMBER(REPLACE(UNIT_PRICE, ',', '.'))) AS TOTAL_AMOUNT,
  PRODUCT_CATEGORY,
  PRODUCT_DETAIL,
  PRODUCT_TYPE,
  STORE_LOCATION,
  CASE 
    WHEN TRANSACTION_TIME BETWEEN '06:00:00' AND '11:59:59' THEN 'Morning'
    WHEN TRANSACTION_TIME BETWEEN '12:00:00' AND '16:59:59' THEN 'Afternoon'
    WHEN TRANSACTION_TIME BETWEEN '17:00:00' AND '19:59:59' THEN 'Evening'
    ELSE 'Night'
  END AS TIME_BUCKETS,
FROM SHOP.COFFEE_SALES.BRIGHT_COFFEE_SHOP_SALES
GROUP BY ALL
ORDER BY TRANSACTION_DATE ASC;
--Cumulative Revenue for the past 3 months 
WITH cleaned_data AS (
  SELECT 
    STORE_LOCATION,
    TO_DATE(TRANSACTION_DATE, 'YYYY/MM/DD') AS txn_date,
    TO_CHAR(TO_DATE(TRANSACTION_DATE, 'YYYY/MM/DD'), 'YYYY-MM') AS month,
    TRANSACTION_QTY,
    TRY_TO_NUMBER(UNIT_PRICE) AS unit_price,
    TRANSACTION_QTY * TRY_TO_NUMBER(UNIT_PRICE) AS revenue
  FROM BRIGHT_COFFEE_SHOP_SALES
  WHERE STORE_LOCATION IN ('Lower Manhattan', 'Astoria', 'Hell\'s Kitchen')
    AND TO_DATE(TRANSACTION_DATE, 'YYYY/MM/DD') BETWEEN '2023-04-01' AND '2023-06-30'
),
monthly_revenue AS (
  SELECT
    STORE_LOCATION,
    month,
    SUM(revenue) AS monthly_revenue
  FROM cleaned_data
  GROUP BY STORE_LOCATION, month
),
cumulative_revenue AS (
  SELECT
    STORE_LOCATION,
    month,
    monthly_revenue,
    SUM(monthly_revenue) OVER (
      PARTITION BY STORE_LOCATION
      ORDER BY month
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS cumulative_revenue
  FROM monthly_revenue
)
SELECT * FROM cumulative_revenue
ORDER BY STORE_LOCATION, month;
--Day-over-day (D-O-D) cummulative revenue for the last 3 months per store
WITH cleaned_data AS (
  SELECT 
    STORE_LOCATION,
    TO_DATE(TRANSACTION_DATE, 'YYYY/MM/DD') AS txn_date,
    TRANSACTION_QTY,
    TRY_TO_NUMBER(UNIT_PRICE) AS unit_price,
    TRANSACTION_QTY * TRY_TO_NUMBER(UNIT_PRICE) AS revenue
  FROM BRIGHT_COFFEE_SHOP_SALES
  WHERE STORE_LOCATION IN ('Lower Manhattan', 'Astoria', 'Hell\'s Kitchen')
    AND TO_DATE(TRANSACTION_DATE, 'YYYY/MM/DD') BETWEEN '2023-04-01' AND '2023-06-30'
),
daily_revenue AS (
  SELECT
    STORE_LOCATION,
    txn_date,
    SUM(revenue) AS daily_revenue
  FROM cleaned_data
  GROUP BY STORE_LOCATION, txn_date
),
cumulative_revenue AS (
  SELECT
    STORE_LOCATION,
    txn_date,
    daily_revenue,
    SUM(daily_revenue) OVER (
      PARTITION BY STORE_LOCATION
      ORDER BY txn_date
      ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS cumulative_revenue
  FROM daily_revenue
)
SELECT * 
FROM cumulative_revenue
ORDER BY STORE_LOCATION, txn_date;
